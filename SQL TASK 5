USE ecommerce_db;
--  Customer details along with their order info
SELECT c.first_name, c.last_name, o.order_id, o.total_amount
FROM Customers c
INNER JOIN Orders o
ON c.customer_id = o.customer_id;

--  Products with their order details
SELECT p.product_name, od.quantity, od.price, o.order_date
FROM Order_Details od
INNER JOIN Products p ON od.product_id = p.product_id
INNER JOIN Orders o ON od.order_id = o.order_id;

--  Customers and their orders (including those with no orders)
SELECT c.first_name, c.last_name, o.order_id, o.status
FROM Customers c
LEFT JOIN Orders o
ON c.customer_id = o.customer_id;

-- Products with order details (showing NULL if never ordered)
SELECT p.product_name, od.order_id, od.quantity
FROM Products p
LEFT JOIN Order_Details od
ON p.product_id = od.product_id;

--  Orders with customer info (showing NULL if customer missing)
SELECT o.order_id, o.total_amount, c.first_name, c.last_name
FROM Customers c
RIGHT JOIN Orders o
ON c.customer_id = o.customer_id;

--  Full join simulation using UNION
SELECT c.first_name, c.last_name, o.order_id, o.status
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id

UNION

SELECT c.first_name, c.last_name, o.order_id, o.status
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;

--  Combine customer, order, and payment details
SELECT 
    c.first_name, c.last_name, 
    o.order_id, o.total_amount, 
    p.payment_method, p.amount
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
LEFT JOIN Payments p ON o.order_id = p.order_id;

--  Product sales report
SELECT 
    p.product_name,
    SUM(od.quantity) AS total_sold,
    SUM(od.quantity * od.price) AS total_revenue
FROM Products p
LEFT JOIN Order_Details od ON p.product_id = od.product_id
GROUP BY p.product_name;

-- self join
SELECT 
    A.first_name AS Customer1, 
    B.first_name AS Customer2, 
    A.city
FROM Customers A
JOIN Customers B 
ON A.city = B.city AND A.customer_id <> B.customer_id;


